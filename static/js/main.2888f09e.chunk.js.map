{"version":3,"sources":["components/Carousel.tsx","App.tsx","index.tsx"],"names":["Carousel","state","images","props","timer","prevProps","this","infinite","step","animationDuration","window","setInterval","f","clearInterval","direction","firstPart","secondPart","slice","setState","frameSize","itemWidth","className","type","disabled","onClick","style","width","map","image","index","src","alt","String","Component","App","length","htmlFor","value","id","min","max","onChange","e","currentTarget","checked","prevState","React","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2888f09e.chunk.js","sourcesContent":["import { Component } from 'react';\nimport './Carousel.scss';\n\ntype Props = {\n  images: string[]\n  step: number;\n  frameSize: number;\n  itemWidth: number;\n  animationDuration: number;\n  infinite: boolean;\n};\n\nexport class Carousel extends Component<Props> {\n  state = {\n    images: this.props.images,\n  };\n\n  timer = 0;\n\n  componentDidUpdate(prevProps: Readonly<Props>): void {\n    const { infinite, step, animationDuration } = this.props;\n\n    if (infinite !== prevProps.infinite && infinite) {\n      this.timer\n      = window.setInterval(() => {\n          this.f(step, 'right');\n        }, animationDuration);\n    }\n\n    if (prevProps.animationDuration !== animationDuration\n      || prevProps.step !== animationDuration) {\n      clearInterval(this.timer);\n      this.timer\n      = window.setInterval(() => {\n          this.f(step, 'right');\n        }, animationDuration);\n    }\n\n    if (!infinite) {\n      clearInterval(this.timer);\n    }\n  }\n\n  f(step: number, direction = 'right'): void {\n    const { images } = this.state;\n\n    let firstPart:string[] = [];\n    let secondPart:string[] = [];\n\n    if (direction === 'right') {\n      firstPart = images.slice(step);\n      secondPart = images.slice(0, step);\n    }\n\n    if (direction === 'left') {\n      firstPart = images.slice(-step);\n      secondPart = images.slice(0, -step);\n    }\n\n    this.setState({\n      images: [...firstPart, ...secondPart],\n    });\n  }\n\n  render() {\n    const {\n      frameSize,\n      step,\n      itemWidth,\n      infinite,\n    } = this.props;\n\n    return (\n      <div className=\"Carousel\">\n        <button\n          type=\"button\"\n          data-cy=\"prev\"\n          className=\"button\"\n          disabled={infinite}\n          onClick={() => this.f(step, 'left')}\n        >\n          Prev\n        </button>\n        <ul\n          className=\"Carousel__list\"\n          style={{ width: `${frameSize * itemWidth}px` }}\n        >\n          {this.state.images.map((image: string, index : number) => (\n            <li key={image}>\n              <img\n                className=\"Carousel__item\"\n                src={image}\n                alt={String(index + 1)}\n                style={{ width: itemWidth }}\n              />\n            </li>\n          ))}\n        </ul>\n        <button\n          type=\"button\"\n          className=\"button\"\n          data-cy=\"next\"\n          disabled={infinite}\n          onClick={() => this.f(step, 'right')}\n        >\n          Next\n        </button>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport { Carousel } from './components/Carousel';\n\ninterface State {\n  images: string[];\n  itemWidth: number;\n  frameSize: number;\n  step: number;\n  animationDuration: number;\n  infinite: boolean;\n}\n\nclass App extends React.Component<{}, State> {\n  state = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n    itemWidth: 130,\n    frameSize: 3,\n    step: 3,\n    animationDuration: 1000,\n    infinite: false,\n  };\n\n  render() {\n    const {\n      images,\n      step,\n      itemWidth,\n      frameSize,\n      animationDuration,\n      infinite,\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        {/* eslint-disable-next-line */}\n        <h1\n          className=\"App__title\"\n          data-cy=\"title\"\n        >\n          Carousel with\n          {' '}\n          {images.length}\n          {' '}\n          images\n        </h1>\n\n        <Carousel\n          images={images}\n          step={step}\n          frameSize={frameSize}\n          itemWidth={itemWidth}\n          infinite={infinite}\n          animationDuration={animationDuration}\n        />\n        <form className=\"form\">\n          <label htmlFor=\"stepId\">\n            <input\n              type=\"range\"\n              value={step}\n              id=\"stepId\"\n              min={1}\n              max={9}\n              onChange={(e) => this.setState({ step: +e.currentTarget.value })}\n            />\n            Slide Step\n            {' '}\n            <span className=\"form__input-value\">{step}</span>\n          </label>\n\n          <label htmlFor=\"itemId\">\n            <input\n              id=\"itemId\"\n              type=\"range\"\n              min={50}\n              max={390}\n              step={2}\n              value={itemWidth}\n              onChange={(e) => this.setState({\n                itemWidth: +e.currentTarget.value,\n              })}\n            />\n            Image Width\n            {' '}\n            <span className=\"form__input-value\">{itemWidth}</span>\n          </label>\n\n          <label>\n            <input\n              type=\"range\"\n              min={500}\n              max={5000}\n              step={1000}\n              value={animationDuration}\n              onChange={(e) => this.setState({\n                animationDuration: +e.currentTarget.value,\n              })}\n            />\n            animationDuration\n            {' '}\n            <span className=\"form__input-value\">{animationDuration}</span>\n          </label>\n\n          <label htmlFor=\"frameId\">\n            <input\n              id=\"frameId\"\n              type=\"range\"\n              value={frameSize}\n              min={1}\n              max={images.length + 1}\n              step={1}\n              onChange={(e) => this.setState({\n                frameSize: +e.currentTarget.value,\n              })}\n            />\n            Frame Size\n            {' '}\n            <span className=\"form__input-value\">{ frameSize * itemWidth}</span>\n          </label>\n\n          <label\n            htmlFor=\"checkbox\"\n            className=\"checkbox-label\"\n          >\n            <input\n              className=\"form__input-checkbox\"\n              type=\"checkbox\"\n              id=\"checkbox\"\n              checked={infinite}\n              onChange={\n                () => this.setState(\n                  prevState => ({ infinite: !prevState.infinite }),\n                )\n              }\n            />\n            <div className={`form__input-fake-checkbox ${infinite ? 'png' : ''}`}> </div>\n            infinite\n          </label>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}